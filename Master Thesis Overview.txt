Substitue polyeder/polyeders with polyhedron/polyhedra
dijkstra erklÃ¤rung add it with predecessor... -> insert the node predecessor
concept definitions/defining ??
ende concept tradoff satz erstzen.


Introduction:
  - Elaborate use cases a bit more                                                      <-- done
  - Research current forms of collision calculation and open pathplanning       <-- done

Programming enviroment and tools.
  - get matlab bib entry                    <-- done
  
Basics
  - enter formula for angle beetween vectors          <-- done
  - plots of A and B                    <-- done
  - enter formula for convex hull                               <-- done
    - Minkowski-Summe  + standart algorithmus           <-- done
  - think about linear programming explanation( usefull, if so another example ) or remove linear programming???   <-- removed, need rethinking
  - pathfinding in graphs      <-- done

concept
  - explain function representation  <-- done
  - explain something from implementation     <-- removed, but needs thinking
  
implementation 
  - whole part for functions, same structure <-- done
   -- inTargetCell needs update to working function    <-- done
  
results
  - generate testriddles            <-- done, maybe more? ( different shapes etc )
  
discussion
  - pictures                   <-- done
  - vertical lines        <-- done
  - more problems???
  
conclusion
  - Appliances and Summary          <-- DONE, BUT A BIT SHORT
  
bibliography
  - find something to put in there <-- DONE, BUT A BIT SHORT ( convex hull / minkowski )
  
  
  reprogram getConvexSubset with simple minX minY points ( why should that not work??)
  
Methods with function:
representation: Object1 = object.coeff = {[x2,x1,x0],....}?
                          object.mid = [x,y,theta]
                          object.def = {[start, end],....}
                          object.above = {1/-1,-1/1,...} %1 means object lies above func  tion, -1 below.
                Border = border.points = {[x1,y1],[x2,y2],[x3,y3],[x4,y4]};
  
  
  TODOs: - current test for inTargetCell is flawed ( to picky )  <--done      This is done by connection each corner of the main object with the target area and checking those functions for intersection.
         - no movement of anything other than main object. Also no movement to border!!!!! <-- SOLVED
         - increase speed by only looking at specific function ( use above/below and direction )?
         - improve isValid ( solve function to slow, need other way) <- SOLVED. Apply to other calls for solve  ( moveToFunc )
         - moveFunc wrong ( not correct for x,y )  <-- SOLVED                                              
         - no movement along axis if objects "touch" each other       <-- done
         - rotation doesnt check for collision --> need isValid or implement at rotation
.......................................................
Programming Steps bottom-up


principle for solving problem
  - break down to multidimensional search
  - independence from raw object representation through interchangable functions
    (on the paper)
    
Way one with points

Object representation
  - point list
  - middle point
  
Used Algorithms
  - generation of Collisionbounds
  - linear programming for cell movement
  - ....
  
Configurationspaces
  - Define space
  - how to calculate it
  - what does it provide
  - problems and solutions ( with building total configuration space ( some calculations ))
  
Local Search
  - The function One Step
    - find next cell
    - find nearest border
    - put object in/infront of cell
    - recalculate configspace for other objects
  
  - Validation of next configuration
  - Problems and Solutions  
  
Results
  - discussion
  - applications
  
Way two with functions ??

Summary
  - short overview of the whole topic
  - further uses and expansions
  